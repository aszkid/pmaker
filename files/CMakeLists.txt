CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

SET(VERSION_LOW 1)
SET(VERSION_UP 0)

SET(PROJ_NAME __projname__)
SET(EXEC_NAME "${PROJ_NAME}")

PROJECT(${PROJ_NAME})
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/inc)

#USEC+++11
#USEC99
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

FILE(GLOB_RECURSE HDRS "${PROJECT_SOURCE_DIR}/inc/*.hpp" "${PROJECT_SOURCE_DIR}/inc/*.h")
FILE(GLOB_RECURSE SRCS "${PROJECT_SOURCE_DIR}/src/*.cpp" "${PROJECT_SOURCE_DIR}/inc/*.c")

SET(EXECUTABLE_NAME ${EXEC_NAME})
ADD_EXECUTABLE(${EXECUTABLE_NAME} ${SRCS} ${HDRS})
SET(EXECUTABLE_OUTPUT_PATH  ${PROJECT_SOURCE_DIR}/bin)

SET_TARGET_PROPERTIES(${EXECUTABLE_NAME} PROPERTIES DEBUG_POSTFIX _d)

SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/../cmk" ${CMAKE_MODULE_PATH})

FIND_PACKAGE(SFML 2 REQUIRED system window graphics network audio)
IF(SFML_FOUND)
	INCLUDE_DIRECTORIES(${SFML_INCLUDE_DIR})
	TARGET_LINK_LIBRARIES(${EXECUTABLE_NAME} ${SFML_LIBRARIES})
ENDIF()

FIND_PACKAGE(OpenGL REQUIRED)
if (OPENGL_FOUND)
	TARGET_LINK_LIBRARIES(${EXECUTABLE_NAME} ${OPENGL_LIBRARIES})
endif()

FIND_PACKAGE(GLSDK REQUIRED glload glutil glm glmesh glimage)
IF(GLSDK_FOUND)
	INCLUDE_DIRECTORIES(${GLSDK_INCLUDE_DIRS})
	TARGET_LINK_LIBRARIES(${EXECUTABLE_NAME} ${GLSDK_LIBRARIES})
ENDIF()

SET(Boost_USE_STATIC_LIBS ON)
FIND_PACKAGE(Boost REQUIRED system filesystem date_time thread chrono)
IF(Boost_FOUND)
	INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
	TARGET_LINK_LIBRARIES(${EXECUTABLE_NAME} ${Boost_LIBRARIES})
ENDIF()

FIND_PACKAGE(LIBROCKET REQUIRED)
IF(LIBROCKET_FOUND)
	INCLUDE_DIRECTORIES(${LIBROCKET_INCLUDE_DIR})
	TARGET_LINK_LIBRARIES(${EXECUTABLE_NAME} ${LIBROCKET_LIBRARIES})
ENDIF()
